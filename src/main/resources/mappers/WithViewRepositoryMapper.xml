<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.withbooks.web.repository.WithViewRepository">

<!-- 위드 전체 목록 조회 -->
<select id="findAll" resultType="WithView">
    select
    b.*
    from
    with_category a
    right join `with_view` b on a.with_id = b.id
    <where>
        <if test="categoryIds != null">
             a.category_id IN
            <foreach collection="categoryIds" item="arr" open="(" close=")" separator=",">
                #{arr}
            </foreach>
        </if>

        <if test="query != null">
            and (name like '%${query}%' or location like '%${query}%')
        </if>

        <if test="faceYn != null">
            <if test="faceYn != 2">
                and face_yn=#{faceYn}
            </if>
        </if>



        <if test="id != null and id != ''">
            and id = ${id}
        </if>

        <if test="name != null and name != ''">
            and name like '%${name}%'
        </if>

        <if test="withTop != null and withTop != ''">
            and with_top like '%${withTop}%'
        </if>
    </where>
    
        group by
            b.id
    order by b.reg_date desc


    limit #{limit} offset #{offset}
    
<!--  카테고리 아이디 where 필요-->
</select>





  <select id="findAllByWithId" resultType="java.lang.String">
    select
          b.name category_name
    from
          with_category  a join book_category b
          on a.category_id = b.id
    where
          a.with_id =  #{withId}

  </select>


    <select id="findAllByWithIds" resultType="WithView">


        select * from with_view
        <where>
            id in
            <foreach collection="withIds" item="arr" open="(" close=")" separator=",">
                #{arr}
            </foreach>

        </where>
    </select>


    <select id="findByBookId" resultType="WithView">

        select * from with_view where id in(SELECT with_id FROM debate_room_view where book_id=#{bookId});

    </select>

    <!-- ========================================================================= -->
    <!-- /with/my-with -->
    <resultMap id="withViewMap" type="WithView">	
		<id property="id" column="id" />
		<result property="blindYn" column="blind_yn"/>
		<result property="withRegId" column="with_reg_id"/>
		<result property="faceYn" column="face_yn"/>
		<result property="regDate" column="reg_date"/>
		<result property="name" column="name"/>
		<result property="intro" column="intro"/>
		<result property="img" column="img"/>
		<result property="interval" column="interval"/>
		<result property="location" column="location"/>
		<result property="personnel" column="personnel"/>
		<result property="memberCnt" column="member_cnt"/>
		<result property="withTop" column="with_top"/>

		<collection property="categoryNames" column="id" ofType="String" select="selectCategoryNames"/>
	</resultMap>

    <select id="selectCategoryNames" resultType="String">
        select 
            bc.name 
        from 
            book_category bc join with_category wc on bc.id = wc.category_id 
        where 
            wc.with_id = #{id}
    </select>

    <select id="findAllByUserId" resultMap="withViewMap">
        select
            wi.id,
            wi.blind_yn,
            wi.with_reg_id,
            wi.face_yn,
            wi.name,
            wi.intro,
            wi.img,
            wi.interval,
            wi.location,
            wi.personnel,
            wi.reg_date,
            us.nickname with_top,
            count(wm.member_id) member_cnt
        from
            `with` wi join `user` us on wi.with_reg_id = us.id
            left join with_member wm on wi.id = wm.with_id
        where
            wm.member_id = #{userId}
        group by
            wi.id
        order by
            wm.join_date desc
        
    </select>



</mapper>
