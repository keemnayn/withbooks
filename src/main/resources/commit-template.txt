<Commit Message Convention>에 대한 안내문
- 컨벤션을 지키는 것은 프로젝트 관리와 협업에 있어서 중요한 부분
- 서로의 작업을 이해하고 효율적이고 안정적으로 관리하도록 함

type: Subject 형식으로 작성하되 변경사항에 대해 간결하고 요점있게 개조식으로 작성하기(50자 이내)
- type:(space)Subject로, : 뒤에만 space를 넣음
- 영어로 작성한다면 대문자 시작이 일반적이나, 편의를 위해 한글 작성 권장
- 끝에 마침표는 찍지 않도록 함

# type
################
# feat: 새로운 기능 추가
# fix: 버그 수정
# design:	CSS 등 사용자 UI 디자인 변경
# !BREAKING CHANGE: 커다란 API 변경의 경우
# !HOTFIX:	급하게 치명적인 버그를 고쳐야하는 경우
# style: 코드 포맷, 세미 콜론 누락 등의 변경 등의 코드 의미에 영향주지 않을 때
# refactor: 프로덕션 코드 리팩토링
# comment	필요한 주석 추가 및 변경
# docs: 문서 수정
# test: 테스트 코드, 리팩토링 테스트 코드 추가
# chore: 빌드 부분 혹은 패키지 매니저 수정사항
# rename:	파일 혹은 폴더명을 수정하거나 옮기는 작업만인 경우
# remove:	파일, 폴더 삭제하는 작업만 수행한 경우
################

# subject-영어보다는 한글을 참고 바람
################
# Add: 추가
# Update: 수정
# Remove: 삭제
# Simplify: 단순화
# Implement: 구현
# Prevent: 방지
# Move: 이동
# Rename: 이름 변경
################

예시
Feat: 회원 가입 기능 구현
Fix : 버그 수정

# 주요 명령어
--- 버전관리 관련
1. git add .
  commit의 전단계
  로컬 디렉토리의 전체 변경 내용을 staging 영역으로 추가
  
2. git commit -m "커밋메세지"
  실제로 저장하는 명령어

3. git pull
  원격 저장소에 있는 데이터를 받아오는 명령어

4. git push origin main
  로컬 브랜치를 원격 저장소로 보내는 명령어

--- branch 관련(더욱 안전한 버전관리를 원할 시-권장사항)
1. git branch 브랜치명
  브랜치 생성
  원본 파일 변경하지 않고, 새 브랜치에 따로 작업하고 싶을 때

2. git checkout 브랜치명
  브랜치 이동

** git checkout -b 브랜치명
  위 두개를 합친 것으로, 브랜치 생성 후 바로 생성된 브랜치로 이동

3. git merge
  새 브랜치에서 따로 작업하였던 파일을 develop 브랜치로 병합할 때

3. git branch -d 브랜치명
  브랜치 삭제

--- 기타
git status
  현재 로컬에 생성된 브랜치 상태 확인

git log
  git 히스토리 확인